df_count %>%
summarise(stem, n=n())
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
tidy_stems %>%
count(stem, sort = TRUE)
# can get sum of key as well
tidy_stems %>%
count(key, sort = TRUE)
df_count<-tidy_stems %>%
group_by(key,stem) %>%
summarise(stem, n= n())
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
tidy_stems %>%
count(stem, sort = TRUE)
# can get sum of key as well
tidy_stems %>%
count(key, sort = TRUE)
df_count<-tidy_stems %>%
group_by(stem,key) %>%
summarise(stem, n= n())
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
tidy_stems %>%
count(stem, sort = TRUE)
# can get sum of key as well
tidy_stems %>%
count(key, sort = TRUE)
df_count<-tidy_stems %>%
group_by(stem) %>%
summarise(key, n= n())
View(tidy_stems)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
tidy_stems %>%
count(stem, sort = TRUE)
# can get sum of key as well
tidy_stems %>%
count(key, sort = TRUE)
df_count<-tidy_stems %>%
group_by(key,stem)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
tidy_stems %>%
count(stem, sort = TRUE)
# can get sum of key as well
tidy_stems %>%
count(key, sort = TRUE)
df_count<-tidy_stems %>%
group_by(stem, key)
View(df_count)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
# tidy_stems %>%
#    count(stem, sort = TRUE)
# can get sum of key as well
# tidy_stems %>%
#    count(key, sort = TRUE)
# df_count<-tidy_stems %>%
#  group_by(stem, key) %>%
df_count<-tidy_stems %>%
distinct(stem) %>%
count(key)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
# tidy_stems %>%
#    count(stem, sort = TRUE)
# can get sum of key as well
# tidy_stems %>%
#    count(key, sort = TRUE)
# df_count<-tidy_stems %>%
#  group_by(stem, key) %>%
df_count<-tidy_stems %>%
distinct(stem)
library(data.table)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
# tidy_stems %>%
#    count(stem, sort = TRUE)
# can get sum of key as well
# tidy_stems %>%
#    count(key, sort = TRUE)
# df_count<-tidy_stems %>%
#  group_by(stem, key) %>%
df_count<-tidy_stems %>%
distinct(stem)
library(data.table)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
# tidy_stems %>%
#    count(stem, sort = TRUE)
# can get sum of key as well
# tidy_stems %>%
#    count(key, sort = TRUE)
# df_count<-tidy_stems %>%
#  group_by(stem, key) %>%
df_count<-tidy_stems %>%
distinct(stem)
tidy_stems
#df <- data.frame(
#  key = c(1, 1, 2, 2, 3),
#  stem = c("word1", "word2", "word2", "word3", "word1")
#)
tidy_stems$indicator <- TRUE
result_df <- dcast(tidy_stems, key ~ stem, value.var = "indicator", fill = FALSE)
library(data.table)
# test new code
# df <- tidy_stems %>%
#   group_by(stem) %>%
#   summarise(sum = n(key))
# this works for overall sum
# tidy_stems %>%
#    count(stem, sort = TRUE)
# can get sum of key as well
# tidy_stems %>%
#    count(key, sort = TRUE)
# df_count<-tidy_stems %>%
#  group_by(stem, key) %>%
df_count<-tidy_stems %>%
distinct(stem)
tidy_stems
#df <- data.frame(
#  key = c(1, 1, 2, 2, 3),
#  stem = c("word1", "word2", "word2", "word3", "word1")
#)
short<-tidy_stems %>%
filter(key,stem)
short<-tidy_stems %>%
select(key,stem)
View(short)
short$indicator <- TRUE
result_df <- dcast(short, key ~ stem, value.var = "indicator", fill = FALSE)
df <- data.frame(
key = c(1, 1, 2, 2, 3),
stem = c("word1", "word2", "word2", "word3", "word1")
)
df$indicator <- TRUE
result_df <- dcast(df, key ~ stem, value.var = "indicator", fill = FALSE)
View(result_df)
result_df <- tidy_stems %>%
distinct(key,stem) %>%
group_by(stem) %>%
summarise(count = n())
View(result_df)
View(abstracts)
sstem_word_count <- tidy_stems %>%
distinct(key,stem) %>%
group_by(stem) %>%
summarise(count = n())
stem_word_count <- tidy_stems %>%
distinct(key,stem) %>%
group_by(stem) %>%
summarise(count = n())
View(stem_word_count)
stem_word_count <- tidy_stems %>%
distinct(key,stem) %>%
group_by(stem) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(stem_word_count)
stem_word_count %>%
top_n(10)
# toparticles_wordstems <- abstracts_stems %>%
#  count(stem, name='ArticleCount') %>% # how many articles mention X word
#  filter(ArticleCount > 78) # words mentioned more than 10 percent of papers Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
ggplot(stem_word_count, aes(count)) +
geom_histogram(bins=60,color = "aquamarine3", fill = "midnightblue") +
labs(
title = "Unique Stem Words Among Articles",
subtitle = "How similar are words used across articles?",
# caption = "Caption if needed",
x = "Number of Articles that Use the Same Word",
y = "Count of Unique Stem Words"
)
# ggsave("UniqueStemWordCount.jpeg", width = 6, height = 4)
# toparticles_wordstems <- abstracts_stems %>%
#  count(stem, name='ArticleCount') %>% # how many articles mention X word
#  filter(ArticleCount > 78) # words mentioned more than 10 percent of papers Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
top_mentioned <- stem_word_count %>%
filter(count > 78) # number is chosen based on percent. Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
ggplot(top_mentioned, aes(count)) +
geom_histogram(bins=60,color = "aquamarine3", fill = "midnightblue") +
labs(
title = "Unique Stem Words Among Articles",
subtitle = "How similar are words used across articles?",
# caption = "Caption if needed",
x = "Number of Articles that Use the Same Word",
y = "Count of Unique Stem Words"
)
# ggsave("UniqueStemWordCount.jpeg", width = 6, height = 4)
# toparticles_wordstems <- abstracts_stems %>%
#  count(stem, name='ArticleCount') %>% # how many articles mention X word
#  filter(ArticleCount > 78) # words mentioned more than 10 percent of papers Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
top_mentioned <- stem_word_count %>%
filter(count > 156) # number is chosen based on percent. Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
ggplot(top_mentioned, aes(count)) +
geom_histogram(bins=60,color = "aquamarine3", fill = "midnightblue") +
labs(
title = "Unique Stem Words Among Articles",
subtitle = "How similar are words used across articles?",
# caption = "Caption if needed",
x = "Number of Articles that Use the Same Word",
y = "Count of Unique Stem Words"
)
# ggsave("UniqueStemWordCount.jpeg", width = 6, height = 4)
# toparticles_wordstems <- abstracts_stems %>%
#  count(stem, name='ArticleCount') %>% # how many articles mention X word
#  filter(ArticleCount > 78) # words mentioned more than 10 percent of papers Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
top_mentioned <- stem_word_count %>%
filter(count > 31) # number is chosen based on percent. Change filter to 31 for top 90 percent, 78 for 75, 156 for 50
ggplot(top_mentioned, aes(count)) +
geom_histogram(bins=60,color = "aquamarine3", fill = "midnightblue") +
labs(
title = "Unique Stem Words Among Articles",
subtitle = "How similar are words used across articles?",
# caption = "Caption if needed",
x = "Number of Articles that Use the Same Word",
y = "Count of Unique Stem Words"
)
# ggsave("UniqueStemWordCount.jpeg", width = 6, height = 4)
# stemcloud <- abstracts_stems %>%
#  count(stem, name='freq', sort=TRUE) # how many articles mention X word
# png(filename = "plot3.png", width = 6, height = 4, units = "in", res = 300)
wordcloud(words = stem_word_count$stem, freq = stem_word_count$count, min.freq = 5, max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"), family="Kohinoor Devanagari")
# ggplot2::ggsave("wordclouddog.png", width = 5, height = 5)
# stemcloud <- abstracts_stems %>%
#  count(stem, name='freq', sort=TRUE) # how many articles mention X word
# png(filename = "plot3.png", width = 6, height = 4, units = "in", res = 300)
wordcloud(words = stem_word_count$stem, freq = stem_word_count$count, min.freq = 5, max.words=76, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"), family="Kohinoor Devanagari")
# ggplot2::ggsave("wordclouddog.png", width = 5, height = 5)
# stemcloud <- abstracts_stems %>%
#  count(stem, name='freq', sort=TRUE) # how many articles mention X word
# png(filename = "plot3.png", width = 6, height = 4, units = "in", res = 300)
wordcloud(words = stem_word_count$stem, freq = stem_word_count$count, min.freq = 5, max.words=76, random.order=TRUE, rot.per=0.35, colors=brewer.pal(8, "Dark2"), family="Kohinoor Devanagari")
# ggplot2::ggsave("wordclouddog.png", width = 5, height = 5)
# stemcloud <- abstracts_stems %>%
#  count(stem, name='freq', sort=TRUE) # how many articles mention X word
# png(filename = "plot3.png", width = 6, height = 4, units = "in", res = 300)
wordcloud(words = stem_word_count$stem, freq = stem_word_count$count, min.freq = 5, max.words=31, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"), family="Kohinoor Devanagari")
# ggplot2::ggsave("wordclouddog.png", width = 5, height = 5)
# stemcloud <- abstracts_stems %>%
#  count(stem, name='freq', sort=TRUE) # how many articles mention X word
# png(filename = "plot3.png", width = 6, height = 4, units = "in", res = 300)
wordcloud(words = stem_word_count$stem, freq = stem_word_count$count, min.freq = 5, max.words=62, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"), family="Kohinoor Devanagari")
# ggplot2::ggsave("wordclouddog.png", width = 5, height = 5)
# stemcloud <- abstracts_stems %>%
#  count(stem, name='freq', sort=TRUE) # how many articles mention X word
# png(filename = "plot3.png", width = 6, height = 4, units = "in", res = 300)
wordcloud(words = stem_word_count$stem, freq = stem_word_count$count, min.freq = 5, max.words=62, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"), family="Kohinoor Devanagari")
ggplot2::ggsave("wordclouddog.png", width = 5, height = 5)
View(tidy_stems)
View(tidier2)
View(abstracts)
View(tidier2)
# Journal titles to lowercase
tidierincluded$journal <- tolower(tidierincluded$journal)
# remove punctuation
tidierincluded$journal <- gsub("[[:punct:][:blank:]]+", " ", tidierincluded$journal)
# Replace incidence of unwanted journal title with wanted journal title.
# detect unwanted journal name strings and replace them with wanted names
tidier2 <- tidierincluded %>%
mutate(journal = case_when(
str_detect(journal, "wiener tierärztliche monatsschrift") ~ "wiener tierarztliche monatsschrift",
str_detect(journal, "applied animal welfare science jaaws")  ~ "applied animal welfare science",
str_detect(journal, "javma journal of the american veterinary medical association")  ~ "journal of the american veterinary medical association",
str_detect(journal, "animals an open access journal from mdpi")  ~ "animals",
str_detect(journal, "anthrozoo s")  ~ "anthrozoos",
TRUE ~ journal
)
)
# view the data
tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
View(tidybehaviour)
# check na in month and
sum(is.na(tidier2$volume))
sum(is.na(tidier2$month))
# check na in month and
sum(is.na(tidier2$volume))
sum(is.na(tidier2$month))
sum(tidier2$year > 2019)
# check na in month and
sum(is.na(tidier2$volume))
sum(is.na(tidier2$month))
sum(tidier2$year > 2020)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE) %>%
group_by(year) %>%
arrange(desc(year), .by_group = TRUE) %>%
arrange(asc(volume), .by_group = TRUE)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE) %>%
tidybehaviour %>%
group_by(year) %>%
arrange(desc(year), .by_group = TRUE) %>%
arrange(asc(volume), .by_group = TRUE)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE) %>%
tidybehaviour <- tidybehaviour %>%
group_by(year) %>%
arrange(desc(year), .by_group = TRUE) %>%
arrange(asc(volume), .by_group = TRUE)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE) %>%
tidybehaviour <- tidybehaviour %>%
group_by(year) %>%
arrange(desc(year), volume, .by_group = TRUE)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
group_by(year) %>%
arrange(desc(year), volume, .by_group = TRUE)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
View(tidybehaviour)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
group_by(year) %>%
arrange(volume, desc(year), .by_group = TRUE)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(volume, desc(year), .by_group = TRUE)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
View(tidybehaviour)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), volume, .by_group = TRUE)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
View(tidybehaviour)
View(tidybehaviour)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
top_behaviour <- tidybehaviour$year > 2019
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
top_behaviour <- (tidybehaviour$year > 2019)
# filtered_df <- filter(df, grepl("word of interest", columnname, ignore.case = TRUE))
# then sort
# tidy_stems %>%
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
top_behaviour <- tidybehaviour[tidybehaviour$year > 2019]
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
top_behaviour <- tidybehaviour[tidybehaviour$year > 2019,]
View(top_behaviour)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
top_behaviour <- tidybehaviour[tidybehaviour$year > 2019,]
sum(is.na(top_behaviour$volume))
# manually correct missing volume
top_behaviour$volume[top_behaviour$key =="rayyan-875297392"] <- "26"
View(top_behaviour)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
# manually correct missing volume, see below for reason
tidybehaviour$volume[tidybehaviour$key =="rayyan-875297392"] <- "26"
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
top_behaviour <- tidybehaviour[tidybehaviour$year > 2019,]
write.csv(top_behaviour,"Behaviour_Articles_to_Extract_01022024.csv")
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour[str_detect(tidybehaviour$abstract, "behaviour"), ]
# manually correct missing volume, see below for reason
tidybehaviour$volume[tidybehaviour$key =="rayyan-875297392"] <- "26"
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
# top_behaviour <- tidybehaviour[tidybehaviour$year > 2019,]
sum(tidybehaviour$year > 2020)
sum(tidybehaviour$year > 2010)
sum(tidybehaviour$year > 2015)
sum(tidybehaviour$year > 2016)
sum(tidybehaviour$year > 2017)
sum(tidybehaviour$year > 2018)
sum(tidybehaviour$year > 2019)
sum(tidybehaviour$year > 2018)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour[str_detect(tidybehaviour$abstract, "behaviour"), ]
# manually correct missing volume, see below for reason
tidybehaviour$volume[tidybehaviour$key =="rayyan-875297392"] <- "26"
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(volume), .by_group = TRUE)
# 2018 onward includes 78 articles, which covers the 62 plus some in case of exclusion
top_behaviour <- tidybehaviour[tidybehaviour$year > 2018,]
View(top_behaviour)
sum(tidybehaviour$year > 2018)
sum(is.na(top_behaviour$volume))
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour[str_detect(tidybehaviour$abstract, "behaviour"), ]
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), desc(title), .by_group = TRUE)
# 2018 onward includes 78 articles, which covers the 62 plus some in case of exclusion
top_behaviour <- tidybehaviour[tidybehaviour$year > 2018,]
View(top_behaviour)
# Let's make a new variable before we change anything
tidybehaviour <- tidier2
# replace all instances of behaviour with behaviour, just like with our tidy stem words
tidybehaviour$abstract <- gsub("behav[^ ]*","behaviour",tidybehaviour$abstract, ignore.case=TRUE)
tidybehaviour <- tidybehaviour[str_detect(tidybehaviour$abstract, "behaviour"), ]
tidybehaviour <- tidybehaviour %>%
arrange(desc(year), title, .by_group = TRUE)
# 2018 onward includes 78 articles, which covers the 62 plus some in case of exclusion
top_behaviour <- tidybehaviour[tidybehaviour$year > 2018,]
View(top_behaviour)
sum(tidybehaviour$year > 2018)
write.csv(top_behaviour,"Behaviour_Articles_to_Extract_01022024.csv")
