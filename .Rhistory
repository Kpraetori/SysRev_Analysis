pattern <- str_c(all_country, collapse = '|')  # A huge alternation pattern!
df %>%
# extract country name matches
mutate(country = str_extract_all(tolower(text), pattern)) %>%
unnest(country, keep_empty = TRUE)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]',destination= 'country.name')) %>% # filter out non-ASCII country names:
pull(country.name) %>%  # define column `country.name.alt` as an atomic vector
tolower()
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]', country.name.alt)) %>% # filter out non-ASCII country names:
pull(country.name.alt) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  ~ "united states",
str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of korea",
TRUE ~ location
)
)
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
agglocation <- falocationdata %<% group_by(country, journal) %<%
count(journal, sort=TRUE)
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
View(agglocation)
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity")
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme(legend.position = "none", axis.text.y = element_text(size = 8)) +
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme(legend.position = "none", axis.text.y = element_text(size = 8))
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust=1))
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  ~ "united states",
str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of korea",
TRUE ~ location
)
)
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
#locationdata <- locationdata %>%
#  mutate(location = case_when(
#    str_detect(location, "USA") ~ "united states",
#    str_detect(location, "UK")  ~ "united kingdom",
#    str_detect(location, "korea")  ~ "republic of korea",
#    str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
#    str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  #~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
#    TRUE ~ location
#    )
#  )
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
#    str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
#    str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  #~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
TRUE ~ location
)
)
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
View(falocationdata)
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
knitr::opts_chunk$set(echo = TRUE)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "England")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  #~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
TRUE ~ location
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "England")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  #~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
TRUE ~ location
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "England")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205") ~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
TRUE ~ location
)
)
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "England")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205") ~ "united states",
str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of korea",
str_detect(location, "Institute of Animal Medicine College of Veterinary Medicine Gyeongsang National University Republic of Korea
") ~ "republic of korea",
TRUE ~ location
)
)
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "England")  ~ "united kingdom",
str_detect(location, "korea")  ~ "south korea",
str_detect(location, "Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205") ~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ # "republic of korea",
#  str_detect(location, "Institute of Animal Medicine College of Veterinary Medicine Gyeongsang National University Republic of Korea
#") ~ "republic of korea",
TRUE ~ location
)
)
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
View(falocationdata)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
View(falocationdata)
View(falocationdata)
View(tidier2)
View(tidier2)
knitr::opts_chunk$set(echo = TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
library(tidyverse)
library(Hmisc)
library(dplyr)
library(ggplot2)
library(ggridges) # for ridgeplot
library(viridis)
library(countrycode)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
#### IMPORTANT: Check that this replaces the first author country, not any author country!!! ###
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "England")  ~ "united kingdom",
str_detect(location, "Korea")  ~ "South Korea",
str_detect(location, "Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205") ~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ # "republic of korea",
#  str_detect(location, "Institute of Animal Medicine College of Veterinary Medicine Gyeongsang National University Republic of Korea
#") ~ "republic of korea",
TRUE ~ location
)
)
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
