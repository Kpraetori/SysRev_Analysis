filter(row_number()==1)
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]', country.name.alt)) %>% # filter out non-ASCII country names:
pull(country.name.alt) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# detect unwanted country name strings and replace them with wanted names
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences, University of Arkansas for Medical Sciences, 4301 West Markham, Little Rock, Arkansas 72205.
")  ~ "united states",
str_detect(location, "College of Veterinary Medicine, Seoul National University, 1 Gwanak-ro, Gwanak-gu, Seoul 151-742, Korea
") ~ "republic of korea",
str_detect(location, "Animal Technology, College of Applied Life Science, Jeju National University, 102 Jejudaehak-ro, Jeju-si 63243, Korea Republic.
") ~ "republic of korea",
TRUE ~ location
)
)
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]', country.name.alt)) %>% # filter out non-ASCII country names:
pull(country.name.alt) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  ~ "united states",
str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of korea",
TRUE ~ location
)
)
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
```{r echo=FALSE}
ggplot(falocationdata, aes(country)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
theme(axis.text.y = element_text(size = 8)) +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
theme_classic()
ggplot(falocationdata, aes(country)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
theme(axis.text.x = element_text(angle = 90, size = 8)) +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
theme_classic()
ggplot(falocationdata, aes(country)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
theme_classic()
ggplot(falocationdata, aes(country)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ggplot(falocationdata, aes(country)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(falocationdata, aes(country)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]', country.name)) %>% # filter out non-ASCII country names:
pull(country.name.alt) %>%  # define column `country.name.alt` as an atomic vector
tolower()
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]', country.name)) %>% # filter out non-ASCII country names:
pull(country.name) %>%  # define column `country.name.alt` as an atomic vector
tolower()
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]',destination= 'country.name')) %>% # filter out non-ASCII country names:
pull(country.name) %>%  # define column `country.name.alt` as an atomic vector
tolower()
View(falocationdata)
# Journal titles to lowercase
tidierincluded$journal <- tolower(tidierincluded$journal)
# remove punctuation
tidierincluded$journal <- gsub("[[:punct:][:blank:]]+", " ", tidierincluded$journal)
# Replace incidence of unwanted journal title with wanted journal title.
# detect unwanted journal name strings and replace them with wanted names
tidier2 <- tidierincluded %>%
mutate(journal = case_when(
str_detect(journal, "wiener tierärztliche monatsschrift") ~ "wiener tierarztliche monatsschrift",
str_detect(journal, "applied animal welfare science jaaws")  ~ "applied animal welfare science",
str_detect(journal, "javma journal of the american veterinary medical association")  ~ "journal of the american veterinary medical association",
str_detect(journal, "animals an open access journal from mdpi")  ~ "animals",
str_detect(journal, "anthrozoo s")  ~ "anthrozoos",
TRUE ~ journal
)
)
# view the data
tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# make a new dataframe made of journals and counts by journal
mostpublished <- tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# now add a column that is ia percentage of 312 so we can see what percent of our data is from which journal
mostpublished <- mostpublished %>%
group_by(journal) %>%
mutate(Percentage=paste0(round(n/312*100,2),"%"))
# Journal titles to lowercase
tidierincluded$journal <- tolower(tidierincluded$journal)
# remove punctuation
tidierincluded$journal <- gsub("[[:punct:][:blank:]]+", " ", tidierincluded$journal)
# Replace incidence of unwanted journal title with wanted journal title.
# detect unwanted journal name strings and replace them with wanted names
tidier2 <- tidierincluded %>%
mutate(journal = case_when(
str_detect(journal, "wiener tierärztliche monatsschrift") ~ "wiener tierarztliche monatsschrift",
str_detect(journal, "applied animal welfare science jaaws")  ~ "applied animal welfare science",
str_detect(journal, "javma journal of the american veterinary medical association")  ~ "journal of the american veterinary medical association",
str_detect(journal, "animals an open access journal from mdpi")  ~ "animals",
str_detect(journal, "anthrozoo s")  ~ "anthrozoos",
TRUE ~ journal
)
)
# view the data
tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# make a new dataframe made of journals and counts by journal
mostpublished <- tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# now add a column that is ia percentage of 312 so we can see what percent of our data is from which journal
mostpublished <- mostpublished %>%
group_by(journal) %>%
mutate(Percentage=paste0(round(n/312*100,2),"%"))
ggplot(tidier2, aes(journal)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
theme(axis.text.y = element_text(size = 8)) +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
coord_flip() +
theme_classic()
ggplot(tidier2, aes(x = year, y = journal, fill=journal)) +
geom_density_ridges(stat="binline", bins=25, scale=0.8) +
theme_ridges()+
theme(legend.position = "none", axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits=c(1965, 2025), breaks=seq(1965,2025,5)) +
labs(
title = "Ridgeline histogram plot of Journal Publication over Time",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening. Plots are colored by journal.",
x = "Year of Publication",
y = "Title of Journal"
)
ggplot(tidier2, aes(x = year, y = journal, fill=journal)) +
geom_density_ridges(stat="binline", bins=25, scale=0.8) +
theme_ridges()+
theme(legend.position = "none", axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits=c(2000, 2025), breaks=seq(2000,2025,5)) +
labs(
title = "Ridgeline histogram plot of Journal Publication over Time",
subtitle = "From 2000 to May 2022",
caption = "Data of articles included after title and abstract screening and coloured by journal. 17 journals contained publications prior to 2000 and not shown in this visualisation. Journals with no line only published articles prior to 2000.",
x = "Year of Publication",
y = "Title of Journal"
)
library(tidyr)
library(dplyr)
#install.packages("countrycode")
library(countrycode)
all_country <- countryname_dict %>%
# filter out non-ASCII country names:
filter(grepl('[A-Za-z]', country.name.alt)) %>%
# define column `country.name.alt` as an atomic vector:
pull(country.name.alt) %>%
# change to lower-case:
tolower()
# define alternation pattern of all country names:
library(stringr)
pattern <- str_c(all_country, collapse = '|')  # A huge alternation pattern!
df %>%
# extract country name matches
mutate(country = str_extract_all(tolower(text), pattern)) %>%
unnest(country, keep_empty = TRUE)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]',destination= 'country.name')) %>% # filter out non-ASCII country names:
pull(country.name) %>%  # define column `country.name.alt` as an atomic vector
tolower()
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%
filter(grepl('[A-Za-z]', country.name.alt)) %>% # filter out non-ASCII country names:
pull(country.name.alt) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  ~ "united states",
str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of korea",
TRUE ~ location
)
)
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
agglocation <- falocationdata %<% group_by(country, journal) %<%
count(journal, sort=TRUE)
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
View(agglocation)
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity")
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme(legend.position = "none", axis.text.y = element_text(size = 8)) +
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme(legend.position = "none", axis.text.y = element_text(size = 8))
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust=1))
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  ~ "united states",
str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of korea",
TRUE ~ location
)
)
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
#locationdata <- locationdata %>%
#  mutate(location = case_when(
#    str_detect(location, "USA") ~ "united states",
#    str_detect(location, "UK")  ~ "united kingdom",
#    str_detect(location, "korea")  ~ "republic of korea",
#    str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
#    str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  #~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
#    TRUE ~ location
#    )
#  )
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
View(falocationdata)
#make sure this is running
library(tidyverse)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
# remove punctuation
locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
# some rows were not recognised and so were replaced. Still some weren't recognised and so are manually changed here.
locationdata <- locationdata %>%
mutate(location = case_when(
str_detect(location, "USA") ~ "united states",
str_detect(location, "UK")  ~ "united kingdom",
str_detect(location, "korea")  ~ "republic of korea",
#    str_detect(location, "Kuhne Franziska Veterinary Department Institute of Animal Welfare and Behaviour FU Berlin Berlin")  ~ "Germany",
#    str_detect(location, "Department of Psychiatry and Behavioral Sciences University of Arkansas for Medical Sciences 4301 West Markham Little Rock Arkansas 72205")  #~ "united states",
#    str_detect(location, "College of Veterinary Medicine Seoul National University 1 Gwanakro Gwanakgu Seoul 151742 Korea") ~ "republic of korea",
#    str_detect(location, "Animal Technology College of Applied Life Science Jeju National University 102 Jejudaehakro Jejusi 63243 Korea Republic") ~ "republic of #korea",
TRUE ~ location
)
)
#
#
# now we make a new table that is expanded so that every country found in the string has its own row, such that two authors = two rows
locationtwo <- locationdata %>%
mutate(country = str_extract_all(tolower(locationdata$location), pattern)) %>%
# select(-location) %>%
unnest(country, keep_empty = TRUE)
falocationdata <-
locationtwo %>%
group_by(key) %>%
filter(row_number()==1)
ggplot(falocationdata, aes(country)) +
geom_bar(color = "darkslategray", fill = "thistle4") +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by First Author Country",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Country of First Author Affiliation or Correspondance",
y = "Count of articles published"
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
View(falocationdata)
agglocation <- falocationdata %>% group_by(country, journal) %>%
count(journal, sort=TRUE)
ggplot(agglocation, aes(fill=journal, y=n, x=country)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, hjust=1))
