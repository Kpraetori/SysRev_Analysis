# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradientn(limits = c(-1, 1),low = muted("red"), mid = "white", high = muted("blue")) +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient(limits = c(-1, 1),low = muted("red"), mid = "white", high = muted("blue")) +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient(low = muted("red"), mid = "white", high = muted("blue")) +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient2(low = muted("red"), mid = "white", high = muted("blue")) +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient2(low = "red", mid = "white", high = "blue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient2(low = "aquamarine", mid = "turquoise", high = "darkblue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(alpha = correlation)) +
scale_edge_colour_gradient2(low = "aquamarine", mid = "turquoise", high = "darkblue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient2(low = "aquamarine", mid = "turquoise", high = "darkblue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient2(low = "grey", mid = "turquoise", high = "darkblue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph( layout="drl") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient(low = "grey", high = "darkblue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
col <- c("aquamarine", "aquamarine3", "turquoise4", "darkblue", "midnightblue")
graph_from_data_frame(d=abs_word_relate,
vertices = toparticles_wordstems %>%
semi_join(abs_word_relate, by= c("stem" = "item1"))) %>% # remove words not connected
ggraph(layout="stress") +
# geom_edge_link(aes(alpha = correlation), colour= "turquoise3") +
geom_edge_link(aes(color = correlation)) +
scale_edge_colour_gradient(low = "grey", high = "darkblue") +
# geom_edge_link(aes(alpha = correlation), color = "midnightblue") +
scale_edge_width(range = c(0.2, 2)) +
geom_node_label(aes(label=name), repel=T,
color = "midnightblue",          # text
fill = "aquamarine3",         # label background
size = 2,                 # font size
label.r = unit(2, "pt"), # corner radius of label box
label.size = .1,          # label border size
label.padding = unit(.2, "lines")) +
#geom_node_text(aes(label=name), size = 4, color="black", repel=T) +
labs(
title = "Correlation between Words",
subtitle = "Relationship of top 75% most used words",
) +
theme_graph()
# ggsave("CorrelationWords.jpeg", width = 8, height = 6)
View(abs_word_relate)
knitr::opts_chunk$set(echo = TRUE)
install.packages('SnowballC')
library(tidyverse)
library(Hmisc)
library(dplyr)
library(ggplot2)
library(ggridges) # for ridgeplot
library(viridis)
library(countrycode)
library(maps)
library(extrafont)
library(stringr)        # text cleaning and regular expressions
library(tidytext)       # provides additional text mining functions
library(widyr)
library(SnowballC) # This is stemming in NLP
library(igraph) # For network graphs
library(ggraph)
theme_set(theme_bw(base_size=12, base_family='sans')+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))
rawdata <- read_csv("RayyanExport06022023/articles.csv")
spec(rawdata)
rawcustom <- read_csv("RayyanExport06022023/customizations_log.csv")
spec(rawcustom)
rawdata
rawcustom
# doesn't work like I want it to
rawdata %>%
separate(notes, into = c("misc", "rating", "exclusion"), sep = "|", convert=TRUE)
rawdata %>%
filter(str_detect(notes, "Included"))
included <- rawdata %>%
filter(str_detect(notes, "Included"))
Hmisc::describe(included)
yearmia <- included %>%
filter(is.na(year))
yearmia
# missing keywords
keymia <- included %>%
filter(is.na(keywords))
keymia
# missing addresses
addressmia <- included %>%
filter(is.na(location))
addressmia
# save missing year file
write_csv(yearmia, path = "RayyanExport06022023/manually_corrected/data_needs_year.csv")
# save missing keywords
write_csv(keymia, path = "RayyanExport06022023/manually_corrected/data_needs_keywords.csv")
# save missing addresses
write_csv(addressmia, path = "RayyanExport06022023/manually_corrected/data_needs_address.csv")
# Load missing year file
withyear <- read_csv("RayyanExport06022023/manually_corrected/data_has_year.csv")
# Load missing keyword file
withkeyword <- read_csv("RayyanExport06022023/manually_corrected/data_has_keyword.csv")
# Load missing location file
withaddress <- read_csv("RayyanExport06022023/manually_corrected/data_has_address.csv")
dim(included)
dim(withaddress)
dim(withkeyword)
dim(withyear)
# use full join to combine data matching the keyword
testjoin1 <- full_join(included, withkeyword, by="key")
testjoin2 <- full_join(testjoin1, withaddress, by="key")
completedata <- full_join(testjoin2, withyear, by="key")
# create new columns that combine the data from the data.x and data.y columns that were created by doing the full_join
completedata$keywords <- coalesce(completedata$keywords.x, completedata$keywords.y)
completedata$year <- coalesce(completedata$year.x, completedata$year.y)
completedata$location <- coalesce(completedata$location.x, completedata$location.y)
# Now to remove the unnecessary data.x and data.y columns
tidierincluded <- completedata %>% select(-c(keywords.x, keywords.y, location.x, location.y, year.x, year.y))
# take a look
summary(tidierincluded)
ggplot(tidierincluded, aes(year)) +
geom_histogram(bins=20, color = "midnightblue", fill = "aquamarine4") +
geom_vline(aes(xintercept = median(year)), color = "turquoise", size = 1) +
geom_vline(aes(xintercept = median(year) + sd(year)), color = "turquoise3", size = 0.5) +
geom_vline(aes(xintercept = median(year) - sd(year)), color = "turquoise3", size = 0.5) +
scale_x_continuous(breaks=seq(1960,2022,5)) +
labs(
title = "Histogram of Article Publication by Year",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening. Vertical lines depict the median and standard deviation.",
x = "Year of article publication",
y = "Count of articles published"
) +
theme_classic()
ggsave("PubbyYear.pdf", width = 8, height = 5)
# Journal titles to lowercase
tidierincluded$journal <- tolower(tidierincluded$journal)
# remove punctuation
tidierincluded$journal <- gsub("[[:punct:][:blank:]]+", " ", tidierincluded$journal)
# Replace incidence of unwanted journal title with wanted journal title.
# detect unwanted journal name strings and replace them with wanted names
tidier2 <- tidierincluded %>%
mutate(journal = case_when(
str_detect(journal, "wiener tierärztliche monatsschrift") ~ "wiener tierarztliche monatsschrift",
str_detect(journal, "applied animal welfare science jaaws")  ~ "applied animal welfare science",
str_detect(journal, "javma journal of the american veterinary medical association")  ~ "journal of the american veterinary medical association",
str_detect(journal, "animals an open access journal from mdpi")  ~ "animals",
str_detect(journal, "anthrozoo s")  ~ "anthrozoos",
TRUE ~ journal
)
)
# view the data
tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# make a new dataframe made of journals and counts by journal
mostpublished <- tidier2 %>%
count(journal, sort=TRUE) %>%
arrange(desc(journal))
# now add a column that is ia percentage of 312 so we can see what percent of our data is from which journal
mostpublished <- mostpublished %>%
group_by(journal) %>%
mutate(Percentage=paste0(round(n/312*100,2),"%"))
top10pub <- mostpublished %>%
rename("Count" = "n", "Journal" = "journal") %>%
arrange(desc(Count)) %>%
head(10)
print(top10pub)
write.csv(top10pub,"Top10Publishers.csv")
ggplot(tidier2, aes(journal)) +
geom_bar(color = "burlywood4", fill = "darkslategray") +
theme(axis.text.y = element_text(size = 8)) +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
labs(
title = "Barplot of Article Publication by Journal",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening.",
x = "Journal publisher",
y = "Count of articles published"
) +
coord_flip() +
theme_classic()
ggplot(tidier2, aes(x = year, y = journal, fill=journal)) +
geom_density_ridges(stat="binline", bins=25, scale=.7) +
theme_ridges()+
theme(legend.position = "none", axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits=c(1965, 2025), breaks=seq(1965,2025,5)) +
labs(
title = "Ridgeline Histogram of Journal Publication over Time",
subtitle = "From ND to May 2022",
caption = "Data of articles included after title and abstract screening. Plots are colored by journal.",
x = "Year of Publication",
y = "Title of Journal"
)
ggsave("RidgelinePublish.pdf", width = 12, height = 10)
ggplot(tidier2, aes(x = year, y = journal, fill=journal)) +
geom_density_ridges(stat="binline", bins=25, scale=0.8) +
theme_ridges()+
theme(legend.position = "none", axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits=c(2002, 2022), breaks=seq(2002,2022,5)) +
labs(
title = "Ridgeline Histogram of Journal Publication over Time",
subtitle = "From 2002 to May 2022",
caption = "Data of articles included after title and abstract screening and coloured by journal. 23 journals contained publications prior to 2002 not shown in this visualisation. Journals with no line only published articles prior to 2002.",
x = "Year of Publication",
y = "Title of Journal"
)
ggsave("RidgelinePublish2022.pdf", width = 12, height = 10)
library(tidyr)
library(dplyr)
#install.packages("countrycode")
library(countrycode)
all_country <- countryname_dict %>%
# filter out non-ASCII country names:
filter(grepl('[A-Za-z]', country.name.alt)) %>%
# define column `country.name.alt` as an atomic vector:
pull(country.name.alt) %>%
# change to lower-case:
tolower()
# define alternation pattern of all country names:
library(stringr)
pattern <- str_c(all_country, collapse = '|')  # A huge alternation pattern!
df %>%
# extract country name matches
mutate(country = str_extract_all(tolower(text), pattern)) %>%
unnest(country, keep_empty = TRUE)
#add a function
all_country <- countrycode::countryname_dict %>%  # remember the :: specifies the function specific to that package
filter(grepl('[A-Za-z]', country.name.en)) %>% # filter out non-ASCII country names:
pull(country.name.en) %>%  # define column `country.name.alt` as an atomic vector
tolower()
pattern <- str_c(all_country, collapse = '|')
# lets make a new dataset to work with
locationdata <- tidier2
locationdata$locations = locationdata$location
# remove punctuation
# locationdata$location = gsub("[[:punct:]\n]","", locationdata$location)
locationdata$locations %<>%
gsub("[[:punct:]\n]","", .) %>%
gsub("USA", "United States", .) %>%
gsub("UK", "United Kingdom", .) %>%
gsub("England", "United Kingdom", .) %>%
gsub("Korea", "South Korea", .) %>%
gsub("Parma", "Italy", .) %>%
gsub("New Brunswick NJ", "United States", .) %>%
gsub("Saint Kitts and Nevis", "Saint Kitts and Nevis", .) %>%
gsub("Berlin", "Germany", .)
knitr::opts_chunk$set(echo = TRUE)
print("The median article year is:")
median(tidierincluded$year)
print("And standard deviation of article year is:")
sd(tidierincluded$year)
print("The median article year is:")
median(tidierincluded$year)
print("And standard deviation of article year is:")
sd(tidierincluded$year)
print("The earliest article year is:")
min(tidierincluded$year)
print("The most recent article year is:")
max (tidierincluded$year)
abstracts <- tidier2 %>% select(key, title, abstract, keywords)
View(abs_word_relate)
View(abs_word_relate)
View(abstracts_words)
install.packages("wordcloud")
library(wordcloud)
library(tidyverse)
library(Hmisc)
library(dplyr)
library(ggplot2)
library(ggridges) # for ridgeplot
library(viridis)
library(countrycode)
library(maps)
library(extrafont)
library(stringr)        # text cleaning and regular expressions
library(tidytext)       # provides additional text mining functions
library(wordcloud)
library(widyr)
library(SnowballC) # This is stemming in NLP
library(igraph) # For network graphs
library(ggraph)
View(abstracts_stems)
stemcloud <- abstracts_stems %>%
count(stem, name='freq') %>% # how many articles mention X word
wordcloud(words = stemcloud$stem, freq = stemcloud$freq, min.freq = 1, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
stemcloud <- abstracts_stems %>%
count(stem, name='freq') # how many articles mention X word
wordcloud(words = stemcloud$stem, freq = stemcloud$freq, min.freq = 1, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
stemcloud <- abstracts_stems %>%
count(stem, name='freq') # how many articles mention X word
wordcloud(words = stemcloud$stem, freq = stemcloud$freq, min.freq = 5, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
stemcloud <- abstracts_stems %>%
count(stem, name='freq', sort=TRUE) # how many articles mention X word
wordcloud(words = stemcloud$stem, freq = stemcloud$freq, min.freq = 5, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
stemcloud <- abstracts_stems %>%
count(stem, name='freq', sort=TRUE) # how many articles mention X word
wordcloud(words = stemcloud$stem, freq = stemcloud$freq, min.freq = 5, max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
citation("SnowballC")
View(abs_word_relate)
View(abs_word_relate)
View(toparticles_wordstems)
View(abstracts_words)
